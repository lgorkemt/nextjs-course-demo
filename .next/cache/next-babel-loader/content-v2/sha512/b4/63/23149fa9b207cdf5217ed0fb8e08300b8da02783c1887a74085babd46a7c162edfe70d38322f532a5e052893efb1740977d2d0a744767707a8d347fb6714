{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lgorkemturan/ReactProjects/nextjs-meetup/pages/[meetupId]/index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetups.image,\n    title: props.meetups.title,\n    address: props.meetups.address,\n    description: props.meetups.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://scott:tiger@cluster0.u3ddh.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://scott:tiger@cluster0.u3ddh.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/lgorkemturan/ReactProjects/nextjs-meetup/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetups","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","meetupData","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,OAAN,CAAcC,KADvB;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,OAAN,CAAcE,KAFvB;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,OAAN,CAAcG,OAHzB;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,OAAN,CAAcI;AAJ7B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,0FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMV,OAAO,GAAG,MAAMS,iBAAiB,CAACE,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEhB,OAAO,CAACiB,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AAEA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMd,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,0FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMc,cAAc,GAAG,MAAMf,iBAAiB,CAACgB,OAAlB,CAA0B;AACrDb,IAAAA,GAAG,EAAEhB,QAAQ,CAACwB,QAAD;AADwC,GAA1B,CAA7B;AAIAd,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLf,IAAAA,KAAK,EAAE;AACL2B,MAAAA,UAAU,EAAE;AACVC,QAAAA,EAAE,EAAEH,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVnB,QAAAA,KAAK,EAAEsB,cAAc,CAACtB,KAFZ;AAGVC,QAAAA,OAAO,EAAEqB,cAAc,CAACrB,OAHd;AAIVF,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAJZ;AAKVG,QAAAA,WAAW,EAAEoB,cAAc,CAACpB;AALlB;AADP;AADF,GAAP;AAWD;AAED,eAAeN,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return (\n    <MeetupDetail\n      image={props.meetups.image}\n      title={props.meetups.title}\n      address={props.meetups.address}\n      description={props.meetups.description}\n    />\n  );\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://scott:tiger@cluster0.u3ddh.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://scott:tiger@cluster0.u3ddh.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}